require:
  - rubocop-performance
  - rubocop-rails
  - rubocop-rspec

AllCops:
  NewCops: enable
  Exclude:
    - db/schema.rb
    - db/migrate/*
    - db/migrate/**/*
    - vendor/**/*
  DisplayCopNames: true
  DisplayStyleGuide: true
  TargetRubyVersion: 2.7.4
  TargetRailsVersion: 6.1

Layout/CaseIndentation:
  Enabled: false

Layout/DefEndAlignment:
  AutoCorrect: true

Performance/RedundantMerge:
  Enabled: false

Layout/EmptyLineAfterGuardClause:
  Enabled: false

Layout/EmptyLineBetweenDefs:
  NumberOfEmptyLines: [0, 1, 2]

Layout/EmptyLines:
  Enabled: false

Layout/EmptyLinesAroundBlockBody:
  Enabled: false

Layout/EmptyLinesAroundClassBody:
  Enabled: false

Layout/EmptyLinesAroundMethodBody:
  Enabled: false

Layout/EmptyLinesAroundModuleBody:
  Enabled: false

Layout/ExtraSpacing:
  AllowForAlignment: true

Layout/SpaceInsideHashLiteralBraces:
  Enabled: false

Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

Layout/IndentationConsistency:
  # Prescribes that in classes and modules the `protected` and `private`
  # modifier keywords shall be indented the same as public methods and that
  # protected and private members shall be indented one step more than the
  # modifiers. This was previously known as the "rails" style.
  EnforcedStyle: indented_internal_methods

Layout/IndentationWidth:
  Enabled: false

Layout/LeadingCommentSpace:
  Enabled: false

Layout/MultilineOperationIndentation:
  Enabled: false

Layout/MultilineMethodCallIndentation:
  AutoCorrect: true
  EnforcedStyle: indented

Layout/IndentationStyle:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Layout/LineLength:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false

Metrics/ClassLength:
  Enabled: true
  Max: 1000

Metrics/ModuleLength:
  Enabled: true
  Max: 500

Metrics/ParameterLists:
  Enabled: true
  Max: 8

Naming/RescuedExceptionsVariableName:
  # This suggests naming error variables "e," in contradiction with the
  # anti-pattern of single-letter variable names in multi-line blocks, so is
  # disabled (it's enabled by default).
  Enabled: false

Rails/UnknownEnv:
  Environments:
    - production
    - staging
    - development
    - test

Rails/HelperInstanceVariable:
  Enabled: true


Rails/SkipsModelValidations:
  # Prevents the use of the following methods because they skip model
  # validations: decrement!, decrement_counter, increment!, increment_counter,
  # toggle!, touch, update_all, update_attribute,  update_column,
  # update_columns, update_counters. These methods are good to use in certain
  # circumstances for performance which is why this is disabled. In general
  # though you should try to use `update` where possible which triggers
  # validations.
  Enabled: false

Rails/DynamicFindBy:
  # Disable this setting because we extend ActiveRecord with certain commands
  # that causes this cop to complain: `find_by_or_initialize_with`,
  # `find_by_or_create_with`, `find_by_or_create_with!`. In general this cop
  # suggests using `find_by` instead of `where(...).take/first` or something
  # similar.
  Enabled: false

Rails/FilePath:
  # This is primarily meant to avoid bugs on operating system that don't use '/'
  # as the path separator. We don't have any plans on moving away from Unix-like
  # operating systems. If we think people might start using Windows or something
  # else, we should remove this.
  Enabled: false

Rails/Output:
  Exclude:
    - "config/**/*"
    - "Gemfile"

Security/YAMLLoad:
  Enabled: false

Style/ColonMethodCall:
  AutoCorrect: true

Style/ConditionalAssignment:
  Enabled: false

Style/ExpandPathArguments:
  AutoCorrect: true

Style/FrozenStringLiteralComment:
  Enabled: false

Style/GuardClause:
  Enabled: false

Style/GlobalVars:
  Enabled: true
  AllowedVariables:
    - $redis

Style/HashSyntax:
  AutoCorrect: true

Style/IfUnlessModifier:
  Enabled: false

Style/MethodCallWithArgsParentheses:
  Enabled: false

Style/MethodDefParentheses:
  AutoCorrect: true

Style/ModuleFunction:
  Enabled: false

Style/MutableConstant:
  Enabled: false

Style/NegatedIf:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

Style/NumericLiterals:
  Enabled: false

Style/NumericPredicate:
  Enabled: false

Style/RedundantParentheses:
  AutoCorrect: true

Style/RedundantException:
  AutoCorrect: true

Style/RedundantReturn:
  Enabled: false

Style/RedundantSelf:
  Enabled: false

Style/StringLiteralsInInterpolation:
  AutoCorrect: true

Style/SymbolArray:
  Enabled: false

Style/SymbolProc:
  Enabled: true
  Exclude:
    - spec/factories.rb

Style/TrailingCommaInArguments:
  AutoCorrect: true
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInArrayLiteral:
  AutoCorrect: true
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInHashLiteral:
  AutoCorrect: true
  EnforcedStyleForMultiline: consistent_comma

Style/RedundantInterpolation:
  AutoCorrect: true

Style/WordArray:
  Enabled: false

Style/Lambda:
  EnforcedStyle: lambda

Style/NegatedWhile:
  Enabled: false

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    collect: map
    collect!: map!
    inject: reduce
    find_all: select
    member?: include?
    detect: detect
    
Style/Documentation:
  Enabled: false

Gemspec/DateAssignment: # new in 1.10
  Enabled: true
Layout/LineEndStringConcatenationIndentation: # new in 1.18
  Enabled: true
Layout/SpaceBeforeBrackets: # new in 1.7
  Enabled: true
Lint/AmbiguousAssignment: # new in 1.7
  Enabled: true
Lint/AmbiguousOperatorPrecedence: # new in 1.21
  Enabled: true
Lint/AmbiguousRange: # new in 1.19
  Enabled: true
Lint/DeprecatedConstants: # new in 1.8
  Enabled: true
Lint/DuplicateBranch: # new in 1.3
  Enabled: true
Lint/DuplicateRegexpCharacterClassElement: # new in 1.1
  Enabled: true
Lint/EmptyBlock: # new in 1.1
  Enabled: true
Lint/EmptyClass: # new in 1.3
  Enabled: true
  AllowComments: true
Lint/EmptyInPattern: # new in 1.16
  Enabled: true
Lint/IncompatibleIoSelectWithFiberScheduler: # new in 1.21
  Enabled: true
Lint/LambdaWithoutLiteralBlock: # new in 1.8
  Enabled: true
Lint/NoReturnInBeginEndBlocks: # new in 1.2
  Enabled: false
Lint/NumberedParameterAssignment: # new in 1.9
  Enabled: true
Lint/OrAssignmentToConstant: # new in 1.9
  Enabled: true
Lint/RedundantDirGlobSort: # new in 1.8
  Enabled: true
Lint/RequireRelativeSelfPath: # new in 1.22
  Enabled: true
Lint/SymbolConversion: # new in 1.9
  Enabled: true
Lint/ToEnumArguments: # new in 1.1
  Enabled: true
Lint/TripleQuotes: # new in 1.9
  Enabled: true
Lint/UnexpectedBlockArity: # new in 1.5
  Enabled: true
Lint/UnmodifiedReduceAccumulator: # new in 1.1
  Enabled: true
Security/IoMethods: # new in 1.22
  Enabled: true
Style/ArgumentsForwarding: # new in 1.1
  Enabled: true
Style/CollectionCompact: # new in 1.2
  Enabled: true
Style/DocumentDynamicEvalDefinition: # new in 1.1
  Enabled: true
Style/EndlessMethod: # new in 1.8
  Enabled: true
Style/HashConversion: # new in 1.10
  Enabled: true
Style/HashExcept: # new in 1.7
  Enabled: true
Style/IfWithBooleanLiteralBranches: # new in 1.9
  Enabled: true
Style/InPatternThen: # new in 1.16
  Enabled: true
Style/MultilineInPatternThen: # new in 1.16
  Enabled: true
Style/NegatedIfElseCondition: # new in 1.2
  Enabled: true
Style/NilLambda: # new in 1.3
  Enabled: true
Style/NumberedParameters: # new in 1.22
  Enabled: true
Style/NumberedParametersLimit: # new in 1.22
  Enabled: true
  Max: 2
Style/QuotedSymbols: # new in 1.16
  Enabled: true
Style/RedundantArgument: # new in 1.4
  Enabled: true
Style/RedundantSelfAssignmentBranch: # new in 1.19
  Enabled: true
Style/SelectByRegexp: # new in 1.22
  Enabled: true
Style/StringChars: # new in 1.12
  Enabled: true
Style/SwapValues: # new in 1.1
  Enabled: true
# This raises an error if you use allow_any_instance_of in rspec. Looking into
# situations where this is problematic, most of the time it isn't, and the
# alternatives to using it are comparatively quite cumbersome. When it's not
# appropriate to use it, it's obvious (because a test breaks), so forbidding it
# entirely seems like the wrong trade-off.
RSpec/AnyInstance:
  Enabled: false
RSpec/ExcessiveDocstringSpacing: # new in 2.5
  Enabled: true
RSpec/IdenticalEqualityAssertion: # new in 2.4
  Enabled: true
RSpec/SubjectDeclaration: # new in 2.5
  Enabled: true
RSpec/Rails/AvoidSetupHook: # new in 2.4
  Enabled: true
RSpec/ExampleLength:
  Enabled: false
RSpec/MultipleExpectations:
  Enabled: false
RSpec/MultipleMemoizedHelpers:
  Enabled: false
RSpec/NestedGroups:
  Enabled: true
  Max: 4
RSpec/InstanceVariable:
 AssignmentOnly: true
Performance/AncestorsInclude: # new in 1.7
  Enabled: true
Performance/BigDecimalWithNumericArgument: # new in 1.7
  Enabled: true
Performance/BlockGivenWithExplicitBlock: # new in 1.9
  Enabled: true
Performance/CollectionLiteralInLoop: # new in 1.8
  Enabled: true
Performance/ConcurrentMonotonicTime: # new in 1.12
  Enabled: true
Performance/ConstantRegexp: # new in 1.9
  Enabled: true
Performance/MapCompact: # new in 1.11
  Enabled: true
Performance/MethodObjectAsBlock: # new in 1.9
  Enabled: true
Performance/RedundantEqualityComparisonBlock: # new in 1.10
  Enabled: true
Performance/RedundantSortBlock: # new in 1.7
  Enabled: true
Performance/RedundantSplitRegexpArgument: # new in 1.10
  Enabled: true
Performance/RedundantStringChars: # new in 1.7
  Enabled: true
Performance/ReverseFirst: # new in 1.7
  Enabled: true
Performance/SortReverse: # new in 1.7
  Enabled: true
Performance/Squeeze: # new in 1.7
  Enabled: true
Performance/StringInclude: # new in 1.7
  Enabled: true
Performance/Sum: # new in 1.8
  Enabled: true
Rails/ActiveRecordCallbacksOrder: # new in 2.7
  Enabled: true
Rails/AddColumnIndex: # new in 2.11
  Enabled: true
Rails/AfterCommitOverride: # new in 2.8
  Enabled: true
Rails/AttributeDefaultBlockValue: # new in 2.9
  Enabled: true
Rails/EagerEvaluationLogMessage: # new in 2.11
  Enabled: true
Rails/ExpandedDateRange: # new in 2.11
  Enabled: true
Rails/FindById: # new in 2.7
  Enabled: true
Rails/I18nLocaleAssignment: # new in 2.11
  Enabled: true
Rails/Inquiry: # new in 2.7
  Enabled: true
Rails/MailerName: # new in 2.7
  Enabled: true
Rails/MatchRoute: # new in 2.7
  Enabled: true

# Disabled because for the same reason that use of "unless" can create
# confusion, sometimes it's easier to comprehend a logical statement that says
# "not include" than one that says "excludes."
Rails/NegateInclude: # new in 2.7
  Enabled: false

Rails/Pluck: # new in 2.7
  Enabled: true
Rails/PluckInWhere: # new in 2.7
  Enabled: true
Rails/RedundantTravelBack: # new in 2.12
  Enabled: true
Rails/RenderInline: # new in 2.7
  Enabled: false
Rails/RenderPlainText: # new in 2.7
  Enabled: true
Rails/ShortI18n: # new in 2.7
  Enabled: true
Rails/SquishedSQLHeredocs: # new in 2.8
  Enabled: true
Rails/TimeZoneAssignment: # new in 2.10
  Enabled: true
Rails/UnusedIgnoredColumns: # new in 2.11
  Enabled: true
Rails/WhereEquals: # new in 2.9
  Enabled: true
Rails/WhereExists: # new in 2.7
  Enabled: false
Rails/WhereNot: # new in 2.8
  Enabled: true
Rails/ActiveRecordAliases:
  Enabled: true

Gemspec/RequireMFA: # new in 1.23
  Enabled: true
Lint/UselessRuby2Keywords: # new in 1.23
  Enabled: true
Naming/BlockForwarding: # new in 1.24
  Enabled: true
Style/FileRead: # new in 1.24
  Enabled: true
Style/FileWrite: # new in 1.24
  Enabled: true
Style/MapToHash: # new in 1.24
  Enabled: true
Style/OpenStructUse: # new in 1.23
  Enabled: true
Performance/StringIdentifierArgument: # new in 1.13
  Enabled: true
Rails/CompactBlank: # new in 2.13
  Enabled: true
Rails/DurationArithmetic: # new in 2.13
  Enabled: true
Rails/RedundantPresenceValidationOnBelongsTo: # new in 2.13
  Enabled: true
Rails/RootJoinChain: # new in 2.13
  Enabled: true
RSpec/BeEq: # new in 2.9.0
  Enabled: true
RSpec/BeNil: # new in 2.9.0
  Enabled: true
RSpec/FactoryBot/SyntaxMethods: # new in 2.7
  Enabled: true
