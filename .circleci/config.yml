version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.7.0
  kubernetes: circleci/kubernetes@0.10.0
  aws-cli: circleci/aws-cli@1.3.0
  slack: circleci/slack@4.1.1

default_environment: &default_environment
  working_directory: ~/DOCTORS_APPOINTMENT
  docker:
    - image: cimg/ruby:3.0.4-browsers
      environment:
        BUNDLE_JOBS: 4
        BUNDLE_PATH: vendor/bundle
        BUNDLE_RETRY: 3
        BUNDLE_WITHOUT: development:staging:production
        BUNDLE_WITH: test
        DB_HOST: localhost
        PGHOST: 127.0.0.1
        RAILS_ENV: test
        NODE_ENV: test
        REDIS_HOST: 127.0.0.1
    - image: circleci/postgres:12.0-alpine
      environment:
        POSTGRES_DB: doctors_appointment_test
        POSTGRES_PASSWORD: ""
        POSTGRES_USER: circleci
    - image: redis
    - image: circleci/node:12

jobs:
  create_git_tag:
    docker:
      - image: alpine/git
    steps:
      - checkout
      - run:
          name: "Create git tag"
          command: |
            echo "Fetching the lastest tag..."
            CURRENT_TAG=$(git tag --sort=committerdate | tail -1)
            echo "Latest tag is: " $CURRENT_TAG
            if [ -z "${CURRENT_TAG}" ]; then
                NEW_TAG=v1
            else
                VERSION=$(echo $CURRENT_TAG | cut -d'v' -f 2)
                NEW_VERSION=$((VERSION+1))
                NEW_TAG="v${NEW_VERSION}"
            fi
            git tag $NEW_TAG
            git push origin $NEW_TAG
  build:
    <<: *default_environment
    steps:
      - checkout

      - restore_cache:
          keys:
            - rails-build-{{ checksum "Gemfile.lock" }}
            - v1-dependency-cache-{{ checksum "yarn.lock" }}

      - run:
          name: Install bundler
          command: gem install bundler:2.3.8

      - run:
          name: Install dependencies
          command: bundle install

      - run:
          name: Database Setup
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate
      - run: yarn
      - run: bundle exec rake webpacker:compile
      - save_cache:
          key: v1-dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: "."
          paths:
            - yarn.lock
      - save_cache:
          key: rails-build-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  security:
    <<: *default_environment
    steps:
      - checkout

      - restore_cache:
          keys:
            - rails-build-{{ checksum "Gemfile.lock" }}

      - run:
          name: Install bundler
          command: gem install bundler:2.3.8

      - run:
          name: Install dependencies
          command: bundle install

      - run:
          name: Database Setup
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate

      - save_cache:
          key: rails-build-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Install Brakeman
          command: gem install brakeman
      - run:
          name: Brakeman
          command: bundle exec brakeman -5 -w3
  lint:
    <<: *default_environment
    steps:
      - checkout

      - restore_cache:
          keys:
            - rails-build-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install bundler
          command: gem install bundler:2.3.8

      - run:
          name: Install dependencies
          command: bundle install

      - run:
          name: Database Setup
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate

      - save_cache:
          key: rails-build-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Check for changed files with Rubocop violations
          command: bundle exec ruby .circleci/rubocop.rb --against `git rev-parse development`

      - store_artifacts:
          path: lint
  stylecheck:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - run: yarn
      - restore_cache:
          keys:
            - v1-dependency-cache-{{ checksum "yarn.lock" }}
            - v1-dependency-cache-
      - run: ./node_modules/.bin/stylelint "**/*.scss"
      - run: eslint \"app/**/*.{js,jsx}\"

  test:
    <<: *default_environment
    parallelism: 1
    steps:
      - checkout

      - restore_cache:
          keys:
            - rails-build-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install bundler
          command: gem install bundler:2.3.8

      - run:
          name: Install dependencies
          command: bundle install

      - run:
          name: Database Setup
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate
      - run: yarn
      - run: bundle exec rake webpacker:compile
      - save_cache:
          key: rails-build-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run: mkdir -p /tmp/test-results/rspec

      # When profiling tests, set RUBYOPT=-W2
      - run:
          name: Parallel RSpec
          command: |
            TESTFILES=$(circleci tests glob "spec/**/*spec.rb" | circleci tests split --split-by=timings)
            RUBYOPT=-W0 bundle exec rspec ${TESTFILES} --color -f p -f RspecJunitFormatter -o /tmp/test-results/rspec/results.xml

      # Save test results for timing analysis
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/ruby-warnings.txt

      # Store generated coverage for each build
      - store_artifacts:
          path: coverage

workflows:
  version: 2
  build_deploy_app:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - master
      - security:
          requires:
            - build
      - test:
          requires:
            - security
      - lint:
          requires:
            - security
      - stylecheck:
          requires:
            - security
